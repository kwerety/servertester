const correctPassword = "admin123";
const API_URL = "https://servertester.onrender.com";

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
if (typeof socket === "undefined") {
  const socket = io(API_URL, {
    transports: ["polling", "websocket"], // –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    reconnectionAttempts: 5,
    timeout: 20000,
  });

  socket.on("connect", () => {
    console.log("Connected to WebSocket server");
  });

  socket.on("status_updated", (data) => {
    console.log("Status updated:", data);
    document.getElementById("toggle-switch").checked = data.status;
    document.getElementById("status-text").innerText = `Status: ${data.status ? "ON" : "OFF"}`;
  });

  socket.on("disconnect", () => {
    console.error("Disconnected from WebSocket server");
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function fetchStatus() {
  try {
    const response = await fetch(`${API_URL}/status`);
    const data = await response.json();
    const status = data.status;

    document.getElementById("toggle-switch").checked = status;
    document.getElementById("status-text").innerText = `Status: ${status ? "ON" : "OFF"}`;
  } catch (error) {
    document.getElementById("status-text").innerText = "Status: Error fetching status";
    console.error("Error fetching server status:", error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function updateStatus(newStatus) {
  try {
    const response = await fetch(`${API_URL}/status`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer YOUR_TOKEN`, // –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
      },
      body: JSON.stringify({ status: newStatus }),
    });
    if (response.ok) {
      document.getElementById("status-text").innerText = `Status: ${newStatus ? "ON" : "OFF"}`;
    } else {
      const errorData = await response.json();
      console.error("Error updating server status:", errorData.error);
    }
  } catch (error) {
    console.error("Error updating server status:", error);
  }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function openAdmin() {
  document.getElementById("admin-panel").classList.add("active");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function loginAdmin() {
  const passwordField = document.getElementById("admin-password");
  const adminPanel = document.getElementById("admin-panel");
  const errorMsg = document.getElementById("error-msg");

  try {
    const response = await fetch(`${API_URL}/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ password: passwordField.value }),
    });

    if (response.ok) {
      document.getElementById("toggle-switch").disabled = false;
      adminPanel.classList.add("fadeOut");
      setTimeout(() => adminPanel.classList.remove("active", "fadeOut"), 500);
    } else {
      errorMsg.style.display = "block";
    }
  } catch (error) {
    console.error("Error during login:", error);
    errorMsg.style.display = "block";
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
document.getElementById("theme-switch").addEventListener("click", function () {
  const body = document.body;
  body.classList.toggle("dark-theme");

  this.innerHTML = body.classList.contains("dark-theme")
    ? '<span id="theme-icon">üåô</span> Switch to Light Theme'
    : '<span id="theme-icon">üåû</span> Switch to Dark Theme';
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
document.getElementById("toggle-switch").addEventListener("change", function () {
  updateStatus(this.checked);
});

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
function downloadFile(fileName) {
  const downloadUrl = `${API_URL}/download/${fileName}`;
  window.location.href = downloadUrl;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
fetchStatus();
